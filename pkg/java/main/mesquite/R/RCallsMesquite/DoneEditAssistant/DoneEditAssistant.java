/* Mesquite.R source code.  Copyright 2010 W. Maddison, H. Lapp & D. Maddison. Mesquite.R is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.This source code and its compiled class files are free and modifiable under the terms of GNU General Public License v. 2.  (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)*/package mesquite.R.RCallsMesquite.DoneEditAssistant;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.*;import mesquite.lib.*;import mesquite.lib.duties.*;/* ======================================================================== */public class DoneEditAssistant extends TreeDisplayAssistantD  {	Vector notes;	boolean done = false;	/*.................................................................................................................*/	 public String getName() {	return "Done Edit Assistant";	 }/*.................................................................................................................*/	 public String getExplanation() {	return "Manages Done button for R tree edting.";	 }	 		/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {		notes = new Vector();    	 	return true; 	}	public boolean isDone(){		return done;	}	/*.................................................................................................................*/	public   TreeDisplayExtra createTreeDisplayExtra(TreeDisplay treeDisplay) {		DoneEditOperator newNote = new DoneEditOperator(this, treeDisplay);		done = false;		notes.addElement(newNote);		return newNote;	}	public boolean getUserChooseable(){		return false;	}	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */   	public boolean requestPrimaryChoice(){   		return true;     	}	/*.................................................................................................................*/   	public boolean isSubstantive(){   		return false;     	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();  	 	if (notes.size()>0){	  	 	DoneEditOperator tno = (DoneEditOperator)notes.elementAt(0);	  	 	DoneEditButton tn = tno.getNote();	  	 	temp.addLine("getNote");	  	 	temp.addLine("tell It");	  	 	temp.incorporate(tn.getSnapshot(file), true);	  	 	temp.addLine("endTell");					}  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Turns off this note", null, commandName, "closeNote")) {    	 		closeAllNotes();    	 		iQuit();    	 	}    	 	else if (checker.compare(this.getClass(), "Returns the note object", null, commandName, "getNote")) {  	 		if (notes.size()>0){		  	 	DoneEditOperator tno = (DoneEditOperator)notes.elementAt(0);		  	 	return tno.getNote();  	 		}    	 	}    	 	else if (checker.compare(this.getClass(), "Sets the font", null, commandName, "setFont")) {			Enumeration e = notes.elements();			while (e.hasMoreElements()) {				Object obj = e.nextElement();				if (obj instanceof DoneEditOperator) {					DoneEditOperator tCO = (DoneEditOperator)obj;		 			tCO.editButton.doCommand("setFont", arguments, checker);		 		}			}    	 	}    	 	else if (checker.compare(this.getClass(), "Sets the font size", null, commandName, "setFontSize")) {			Enumeration e = notes.elements();			while (e.hasMoreElements()) {				Object obj = e.nextElement();				if (obj instanceof DoneEditOperator) {					DoneEditOperator tCO = (DoneEditOperator)obj;		 			tCO.editButton.doCommand("setFontSize", arguments, checker);		 		}			}    	 	}    	 	else    	 		return  super.doCommand(commandName, arguments, checker);		return null;   	 }   		/*.................................................................................................................*/ 	public void closeAllNotes() {		Enumeration e = notes.elements();		while (e.hasMoreElements()) {			Object obj = e.nextElement();			if (obj instanceof DoneEditOperator) {				DoneEditOperator tCO = (DoneEditOperator)obj;	 			tCO.turnOff();	 		}		}	}	/*.................................................................................................................*/ 	public void endJob() {    	 	closeAllNotes(); 		super.endJob();		resetContainingMenuBar(); 	}}/* ======================================================================== */class DoneEditOperator extends TreeDisplayDrawnExtra {	DoneEditAssistant notesModule;	DoneEditButton editButton;			public DoneEditOperator (DoneEditAssistant ownerModule, TreeDisplay treeDisplay) {		super(ownerModule, treeDisplay);		this.notesModule=ownerModule;		editButton = new DoneEditButton(notesModule, this);		editButton.setVisible(false);		addPanelPlease(editButton);	}	public DoneEditButton getNote(){		return editButton;	}	/*.................................................................................................................*/	public   void placeNote(Tree tree, int drawnRoot) {		int noteX = treeDisplay.getTreeDrawing().x[drawnRoot]+editButton.getOffsetX();		int noteY = treeDisplay.getTreeDrawing().y[drawnRoot]+editButton.getOffsetY();				if (noteX>treeDisplay.getBounds().width) {			editButton.setOffsetX(treeDisplay.getBounds().width-treeDisplay.getTreeDrawing().x[drawnRoot]-40);			noteX = treeDisplay.getTreeDrawing().x[drawnRoot]+editButton.getOffsetX();		}		else if (noteX<0) {			editButton.setOffsetX(-treeDisplay.getTreeDrawing().x[drawnRoot]+4);			noteX = treeDisplay.getTreeDrawing().x[drawnRoot]+editButton.getOffsetX();		}					if (noteY>treeDisplay.getBounds().height) {			editButton.setOffsetY(treeDisplay.getBounds().height-treeDisplay.getTreeDrawing().y[drawnRoot]-40);			noteY = treeDisplay.getTreeDrawing().y[drawnRoot]+editButton.getOffsetY();		}		else if (noteY<0) {			editButton.setOffsetY(-treeDisplay.getTreeDrawing().y[drawnRoot]+4);			noteY = treeDisplay.getTreeDrawing().y[drawnRoot]+editButton.getOffsetY();		}		if ((noteX!=editButton.getBounds().x) || (noteY!=editButton.getBounds().y))			editButton.setLocation(noteX, noteY);					if (!editButton.isVisible()) {			editButton.setVisible(true);		}	}	/*.................................................................................................................*/	public   void setTree(Tree tree) {	}	/*.................................................................................................................*/	public   void drawOnTree(Tree tree, int drawnRoot, Graphics g) {		if (!editButton.isVisible()) {			editButton.setVisible(true);		}		//placeNote(tree, drawnRoot);	}	/*.................................................................................................................*/	public   void printOnTree(Tree tree, int drawnRoot, Graphics g) {		if (!editButton.isVisible()) {			editButton.setVisible(true);		}		//placeNote(tree, drawnRoot);		//treeNote.print(g);	}		/*.................................................................................................................*/	public void turnOff() {		if (editButton!=null && treeDisplay!=null)			removePanelPlease(editButton);		super.turnOff();	}}/* ======================================================================== */class DoneEditButton extends Legend implements ActionListener {	DoneEditAssistant ownerModule;	DoneEditOperator notesOperator;	int noteWidth=100;	int noteHeight=120;	int topEdge = 6;	int cornerEdge = 4;	boolean invalid;	Button button;	boolean checkHeight = true;	Font font=null;	StringInABox textArea;	public DoneEditButton(DoneEditAssistant ownerModule, DoneEditOperator notesOperator) {		super(100, 20);		this.ownerModule = ownerModule;		this.notesOperator = notesOperator;		//setBackground(getParent().getBackground());		setLayout(null);		font = getFont();		checkHeight = true;		setLayout(null);		textArea = new StringInABox("Edit tree, then hit \"Done\" button to return to R", new Font("SanSerif", Font.PLAIN, 12), noteWidth-6);		button = new Button("Done");		button.addActionListener(this);		add(button, BorderLayout.SOUTH);		button.setBounds(8,noteHeight - 30, noteWidth-16, 26);		button.setVisible(true);		setBackground(ColorDistribution.veryLightYellow);		setSize(noteWidth, noteHeight);		doLayout();	}		public void invalidate(){		invalid = true;	}			public void resetHeight(int height) {		noteHeight = height;		super.setSize(noteWidth, height);	}		public void paint(Graphics g) {	   	if (MesquiteWindow.checkDoomed(this))	   		return;		invalid = false;		if (g instanceof PrintGraphics) {		}		else {		textArea.draw(g, 3, 10);		g.setColor(Color.cyan);		g.drawRect(0,0,noteWidth-1, noteHeight-1);		g.fillRect(0,0, noteWidth, 8);		}		MesquiteWindow.uncheckDoomed(this);	}/*	public void mouseDown (int modifiers, int clickCount, long when, int x, int y, MesquiteTool tool) {		if (y<=topEdge) {			if (x>= noteWidth - 16) {				if (MesquiteEvent.controlKeyDown(modifiers))						panelTouched(modifiers, x,y, false);				else					ownerModule.showPopUp(this, x+8, y+8);			}			else {				super.mouseDown(modifiers, clickCount, when, x, y, tool);			}		}		else {			ownerModule.done = true;		}	}*/	public void actionPerformed(ActionEvent e) {		ownerModule.done = true;		button.setLabel("Thanks!");			}}